// Нам нужно создать функцию ,очевидно асинхронную ,тк должна быть задержка на то количество миллисекунд ,которое мы передаем в функцию при ее вызове
// задержка реализуется через setTimeout внутри промиса.Получается что при вызове функции мы передаем туда положительное число ,далее внутри функции это
// число отдается в setTimeout ,и после истечения этого времени будет возвращен промис

declare var Promise: any;

function sleep(millis: number): Promise<void> {
    return new Promise((res) => {
        setTimeout(res, millis);
    });
}

// Немного физического анализа для укоренения знаний.Хочется рассосать то,каким образом тут работает промис и как он понимает ,когда ему выполняться
// То ,что я создаю промис через синтаксис вида new Promise() - понятно ,в случае именно нашей задачи мы инициализируем только res(resolve) состояние
// ,избегая rej(reject) , тк в нашем случае использование rej было бы избыточно,именно благодаря res и его передаче внутрь setTimeout ,в качестве функции,
//  которая будет выполнена по истечению переданного кол-ва миллисекунд мы и приходим к тому ,что .then() выполняется корректно после определенной задержки.
// Тоесть как будто бы промис передает setTimout-у свой номер телефона (res),а setTimeout получает уведомление (переданное в функцию число) о том,
// когда именно нужно набрать промис и после того,как таймер его набирает - он подключается (исполнение .then())

let t = Date.now();
sleep(100).then(() => console.log(Date.now() - t)); // 100

// сорян за костыль в самом верху файла,компилятор ругался на Promise (TS2339),не хотел tsconfig создавать,тоже самое будет касать и других
// задач с похожими проблемами,если принципиально важно - сделаю,как положено
